name: Build and Release Applications

on:
  push:
    branches:
      - develop

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      
      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          VERSION=$(grep 'version: ' pubspec.yaml | sed 's/version: //')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          
      - name: Check if tag exists
        id: check_tag
        run: |
          TAG_EXISTS=$(git tag -l "$VERSION")
          if [[ "$TAG_EXISTS" == "$VERSION" ]]; then
            SUFFIX=1
            NEW_TAG="$VERSION-$SUFFIX"
            while [[ $(git tag -l "$NEW_TAG") == "$NEW_TAG" ]]; do
              SUFFIX=$((SUFFIX+1))
              NEW_TAG="$VERSION-$SUFFIX"
            done
            echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          else
            echo "NEW_TAG=$VERSION" >> $GITHUB_ENV
          fi
          
      - name: Set output
        id: set_version
        run: echo "::set-output name=version::$NEW_TAG"

  build-and-release:
    needs: prepare
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Flutter
        uses: subosito/flutter-action@v1
        with:
          flutter-version: '3.x'

      - name: Build Android APK
        run: flutter build apk

      - name: Build iOS App
        run: flutter build ios --release --no-codesign

      - name: Build macOS App
        run: flutter build macos --release

      - name: Archive Applications
        run: |
          zip -r build_outputs_${{ needs.prepare.outputs.version }}.zip build/app/outputs/flutter-apk/app-release.apk build/ios/iphoneos build/macos/Build/Products/Release

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.prepare.outputs.version }}
          release_name: Release ${{ needs.prepare.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./build_outputs_${{ needs.prepare.outputs.version }}.zip
          asset_name: build_outputs_${{ needs.prepare.outputs.version }}.zip
          asset_content_type: application/zip